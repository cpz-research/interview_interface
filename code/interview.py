import json
import uuid
import time
import requests
import streamlit as st

API_URL = "https://xakur8y87j.execute-api.eu-north-1.amazonaws.com/Prod/"

st.set_page_config(page_title="Study Chat", page_icon="ðŸ’¬", layout="centered")

# ------- Initialize session state -------
if "consent_given" not in st.session_state:
    st.session_state.consent_given = None

if "interview_selected" not in st.session_state:
    st.session_state.interview_selected = None

if "history" not in st.session_state:
    st.session_state.history = []

if "ended" not in st.session_state:
    st.session_state.ended = False

# ------- Consent page -------
if st.session_state.consent_given is None:
    st.title("Understanding working decisions of mothers")
    st.markdown(
        """
        <p style='font-size:15px; color:black;'>
        <i>
        Hello, and thank you for participating!<br><br>
        Weâ€™re testing the setup of an <b>AI-assisted qualitative interview</b>. 
        Some questions are written by researchers, while follow-ups are generated by AI.<br><br>
        This is only a <b>technical test</b>.<br><br>
        Your responses are <b>anonymous</b> and will be <b>deleted after one month</b>.<br><br>
        <b>If you are willing to participate, please click Yes to proceed.</b>
        </i>
        </p>
        """,
        unsafe_allow_html=True
    )

    col1, col2 = st.columns(2)

    # Yes button
    if col1.button("Yes, I consent"):
        st.session_state.consent_given = True
        st.rerun()

    # No button
    if col2.button("No, I do not consent"):
        st.session_state.consent_given = False
        st.rerun()

    st.stop()  # halt execution until a button is clicked

# ------- No consent -------
if st.session_state.consent_given is False:
    st.warning("You did not consent. You cannot use this app.")
    st.stop()

# ------- Interview selection page -------
if st.session_state.interview_selected is None:
    st.title("Select Interview Type")
    st.markdown("Please choose which interview you would like to participate in:")

    interview_options = ["PART_TIME", "FULL_TIME", "OTHER"]
    selected_iid = st.radio("Interview ID", interview_options)

    if st.button("Confirm"):
        st.session_state.interview_selected = selected_iid
        st.rerun()
    st.stop()  # stop script until selection is confirmed

# ------- Main chat -------
st.title("Study Chat")
st.caption("You have consented. Let's get started")

# Session and interview id
def get_param(params, key, default):
    try:
        val = params.get(key)
        if isinstance(val, list):
            return val[0] if val else default
        return val if val else default
    except Exception:
        return default

try:
    params = st.query_params
except Exception:
    params = st.experimental_get_query_params()

sid_default = str(uuid.uuid4())
sid = get_param(params, "sid", sid_default)
iid = st.session_state.interview_selected

# Sidebar
with st.sidebar:
    st.subheader("Session")
    st.write(f"Session ID: `{sid}`")
    st.write(f"Interview ID: `{iid}`")

# Render chat history
for msg in st.session_state.history:
    with st.chat_message(msg["role"]):
        st.write(msg["content"])

# Chat input
placeholder = "Type your message"
if st.session_state.ended:
    st.info("Session ended. Refresh the page or change sid to start a new one.")
    user_text = None
else:
    user_text = st.chat_input(placeholder)

# Backend call
def call_backend(message: str) -> str:
    payload = {
        "route": "next",
        "payload": {
            "session_id": sid,
            "interview_id": iid,
            "user_message": message
        }
    }
    r = requests.post(API_URL, json=payload, headers={"Content-Type": "application/json"}, timeout=60)
    if not r.ok:
        try:
            info = r.json()
        except Exception:
            info = {"message": r.text}
        raise RuntimeError(f"Backend error {r.status_code}: {info.get('message', 'no message')}")
    data = r.json()
    return data.get("message") or json.dumps(data)

# Handle user input
if user_text:
    st.session_state.history.append({"role": "user", "content": user_text})
    with st.chat_message("user"):
        st.write(user_text)

    with st.chat_message("assistant"):
        placeholder = st.empty()
        try:
            reply_text = call_backend(user_text)
            acc = ""
            for ch in reply_text:
                acc += ch
                placeholder.write(acc)
                time.sleep(0.005)
        except Exception as e:
            st.error(str(e))
            reply_text = "There was an error reaching the server. Please try again."
            placeholder.write(reply_text)

    st.session_state.history.append({"role": "assistant", "content": reply_text})

    if user_text.strip().lower() in {"stop", "end", "quit"}:
        st.session_state.ended = True
        st.toast("Session ended.", icon="ðŸ›‘")
    st.rerun()